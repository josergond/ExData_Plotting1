swirl()
libary(swirl)
installed.packages("swirl")
library(library)
library(swirl)
swirl(0)
head(polution)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm,col="blue")
abine(h=12)
abline(h=12)
hist(ppm,col="green")
rug(ppm)
high
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col = "magenta",lwd=4)
names(pollution)
table(pollution$region)
reg<-table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(data =pollution,pm25~region, col = "red")
boxplot(pm25~region, data =pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution,region=="east")
head(east)
hist(east,col="green")
hist(east$pm25,col="green")
west<-subset(pollution,region=="west")
hist(subset(pollution,region=="west"$pm25,col="green"))
hist(subset(pollution,region=="west")$pm25,col="green"))
hist(subset(pollution,region=="west")$pm25,col="green")
plot(latitude,pm25)
call(latitude,pm25)
skip(0)
skip()
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude, ppm,col =pollution$region))
plot(pollution$latitude, ppm,col =pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=(c,5,4,2,1))
par(mfrow=c(1,2),mar=(c,5,4,2,1))
par(mfrow=c(1,2),mar=c(5,4,2,1))
west<-subset(pollution,region =="west")
plot(west$latitude,west$pm25,man="West")
plot(west$latitude,west$pm25,main="West")
plot(west$latitude,west$pm25,main="")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,"geysterplot.png")
dev.copy(png,"geyserplot.png")
dev.copy(png,file = "geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyiplot(Life.Exp~Income | region,data = state,layout=c(4,1))
xyplot(Life.Exp~Income | region,data = state,layout=c(4,1))
xyplot(Life.Exp~Income | region,data = state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,mpg)
ggplot2(displ,hwy,mpg)
qplot(displ,hwy,data = mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
play()
dev.off
dev.off()
nxt()
boxplot(Ozone~Month,airquality)
Type boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
skip()
plot()
skip()
skip()
skip()
skip()
skip()
par()$pin
par("fg")
par("pch")
par("lty")
skip()
skip()
skip()
install.packages(c("git2r", "KernSmooth", "pillar", "pkgbuild", "RCurl", "rematch2", "rex", "rlang", "tibble", "tidyr", "usethis", "withr", "xml2"))
swirl()
libary(swirl)
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
skip()
skip()
skip()
skip()
url<-("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip")
file.download(url,"household_power_consumption.zip")
library(data.table)
library(dplyr)
library(lubridate)
#name file features
features<-fread("household_power_consumption.txt")
#Convert character Date to date format using lubridate
features$Date<-dmy(features$Date)
features_s1<-subset(features,Date>="2007-02-01" & Date<="2007-02-02")
setwd("~/GitHub/ExData_Plotting1")
library(data.table)
library(dplyr)
library(lubridate)
#Store the URL to the zip file
url<-("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fho)usehold_power_consumption.zip")
#download and rename zip file
download.file(url,"household_power_consumption.zip")
url<-("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fho)usehold_power_consumption.zip")
#download and rename zip file
download.file(url,"household_power_consumption.zip")
url<-("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fho)usehold_power_consumption.zip")
#download and rename zip file
download.file(url,"household_power_consumption.zip")
#name file features
features<-fread("household_power_consumption.txt")
#Convert character Date to date format using lubridate
features$Date<-dmy(features$Date)
features_s1<-subset(features,Date>="2007-02-01" & Date<="2007-02-02")
#convert all others to proper classes
features_s1$Global_active_power<-as.numeric(features_s1$Global_active_power)
features_s1$Global_reactive_power<-as.numeric(features_s1$Global_reactive_power)
features_s1$Voltage<-as.numeric(features_sub2$Voltage)
features_s1$Global_intensity<-as.numeric(features_s1$Global_intensity)
features_s1$Sub_metering_1<-as.numeric(features_s1$Sub_metering_1)
features_s1$Sub_metering_2<-as.numeric(features_s1$Sub_metering_2)
features_s1$Sub_metering_3<-as.numeric(features_s1$Sub_metering_3)
features_s1$Time<-as.ITime(features_s1$Time,format="%H:%M:%S")
#summary(features_s1)
#class(features_s1$Time)
#Histogram plot of Global Active Power
hist(features_s1$Global_active_power,
freq = TRUE,xlab="Global Active Power (kilowatts)",
ylim=c(0, 1200),col="orangered",main="Global Active Power")
dev.copy(png,file="plot1.png")
dev.off()
#name file features
features<-fread("household_power_consumption.txt")
#Convert character Date to date format using lubridate
features$Date<-dmy(features$Date)
features_s1<-subset(features,Date>="2007-02-01" & Date<="2007-02-02")
#convert all others to proper classes
features_s1$Global_active_power<-as.numeric(features_s1$Global_active_power)
features_s1$Global_reactive_power<-as.numeric(features_s1$Global_reactive_power)
features_s1$Voltage<-as.numeric(features_sub2$Voltage)
features_s1$Global_intensity<-as.numeric(features_s1$Global_intensity)
features_s1$Sub_metering_1<-as.numeric(features_s1$Sub_metering_1)
features_s1$Sub_metering_2<-as.numeric(features_s1$Sub_metering_2)
features_s1$Sub_metering_3<-as.numeric(features_s1$Sub_metering_3)
features_s1$Time<-as.ITime(features_s1$Time,format="%H:%M:%S")
#summary(features_s1)
#class(features_s1$Time)
#convert all others to proper classes
features_s1$Global_active_power<-as.numeric(features_s1$Global_active_power)
features_s1$Global_reactive_power<-as.numeric(features_s1$Global_reactive_power)
features_s1$Voltage<-as.numeric(features_sub1$Voltage)
features_s1$Global_intensity<-as.numeric(features_s1$Global_intensity)
features_s1$Sub_metering_1<-as.numeric(features_s1$Sub_metering_1)
features_s1$Sub_metering_2<-as.numeric(features_s1$Sub_metering_2)
features_s1$Sub_metering_3<-as.numeric(features_s1$Sub_metering_3)
features_s1$Time<-as.ITime(features_s1$Time,format="%H:%M:%S")
#summary(features_s1)
#class(features_s1$Time)
features_s1[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
#Prepare png file for saving
png("plot2.png", width=480, height=480)
## Plot 2
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
View(features_s1)
features_s1[, dateTime := as.POSIXct(paste(Date, Time), format = "%d/%m/%Y %H:%M:%S")]
View(features_s1)
View(features_s1)
features_s1[, dateTime := as.POSIXct(paste(Date, Time), format = "%Y%m/%d %H:%M:%S")]
View(features_s1)
View(features_s1)
features_s1[, dateTime := as.POSIXct(paste(Date, Time), format = "%Y-%m-/%d %H:%M:%S")]
View(features_s1)
features_s1[, dateTime := as.POSIXct(paste(Date, Time), format = "%Y-%m-%d %H:%M:%S")]
View(features_s1)
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
#Prepare png file for saving
png("plot3.png", width=480, height=480)
#Line chart for plot #3 including legend
plot(features_s1[, dateTime], featurs_s1[, Sub_metering_1], type="l",
xlab="",
ylab="Energy sub metering")
#Create line plots for the other two sub metering stations
lines(features_s1[, dateTime], powerDT[, Sub_metering_2],col="red")
lines(features_s1[, dateTime], powerDT[, Sub_metering_3],col="blue")
#create legend with appropriate colors to match Sub Metering colors shown above
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
dev.off()
#convert all others to proper classes
features_s1$Global_active_power<-as.numeric(features_s1$Global_active_power)
features_s1$Global_reactive_power<-as.numeric(features_s1$Global_reactive_power)
features_s1$Voltage<-as.numeric(features_sub1$Voltage)
features_s1$Global_intensity<-as.numeric(features_s1$Global_intensity)
features_s1$Sub_metering_1<-as.numeric(features_s1$Sub_metering_1)
features_s1$Sub_metering_2<-as.numeric(features_s1$Sub_metering_2)
features_s1$Sub_metering_3<-as.numeric(features_s1$Sub_metering_3)
features_s1$Time<-as.ITime(features_s1$Time,format="%H:%M:%S")
#summary(features_s1)
#class(features_s1$Time)
#Line chart for plot #2
# First combine Date and time columents
features_s1[, dateTime := as.POSIXct(paste(Date, Time), format = "%Y-%m-%d %H:%M:%S")]
#Prepare png file for saving
png("plot2.png", width=480, height=480)
## Plot 2
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
#Prepare png file for saving
png("plot3.png", width=480, height=480)
#Line chart for plot #3 including legend
plot(features_s1[, dateTime], featurs_s1[, Sub_metering_1], type="l",
xlab="",
ylab="Energy sub metering")
#Create line plots for the other two sub metering stations
lines(features_s1[, dateTime], powerDT[, Sub_metering_2],col="red")
lines(features_s1[, dateTime], powerDT[, Sub_metering_3],col="blue")
#create legend with appropriate colors to match Sub Metering colors shown above
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
dev.off()
#Prepare png file for saving
png("plot3.png", width=480, height=480)
#Line chart for plot #3 including legend
#Prepare png file for saving
png("plot3.png", width=480, height=480)
#Line chart for plot #3 including legend
plot(features_s1[, dateTime], features_s1[, Sub_metering_1], type="l",
xlab="",
ylab="Energy sub metering")
#Create line plots for the other two sub metering stations
lines(features_s1[, dateTime], powerDT[, Sub_metering_2],col="red")
lines(features_s1[, dateTime], powerDT[, Sub_metering_3],col="blue")
#Prepare png file for saving
png("plot3.png", width=480, height=480)
#Line chart for plot #3 including legend
plot(features_s1[, dateTime], features_s1[, Sub_metering_1], type="l",
xlab="",
ylab="Energy sub metering")
#Create line plots for the other two sub metering stations
lines(features_s1[, dateTime], features_s1[, Sub_metering_2],col="red")
lines(features_s1[, dateTime], features_s1[, Sub_metering_3],col="blue")
#create legend with appropriate colors to match Sub Metering colors shown above
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
dev.off()
#Prepare png file for saving
png("plot4.png", width=480, height=480)
#Line chart for plot #3 including legend
par(mfrow=c(2,2))
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
#Specify 2 x 2 plots; first column contains plot #2 and #3
par(mfrow=c(2,2))
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
png("plot4.png", width=480, height=480)
dev.off()
#Specify 2 x 2 plots; first column contains plot #2 and #3
par(mfrow=c(2,2))
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
#Plot3
plot(features_s1[, dateTime], features_s1[, Sub_metering_1], type="l",
xlab="",
ylab="Energy sub metering")
#Create line plots for the other two sub metering stations
lines(features_s1[, dateTime], features_s1[, Sub_metering_2],col="red")
lines(features_s1[, dateTime], features_s1[, Sub_metering_3],col="blue")
#create legend with appropriate colors to match Sub Metering colors shown above
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
plot(x = features_s1[, dateTime]
, y = features_s1[,Voltage ]
, type="l", xlab="datetime", ylab="Voltage")
dev.off()
#Specify 2 x 2 plots; first column contains plot #2 and #3
par(mfrow=c(2,2))
# Plot1 (previously plot #2)
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
#Plot 2- New plot; Voltage vs time
plot(x = features_s1[, dateTime]
, y = features_s1[,Voltage ]
, type="l", xlab="datetime", ylab="Voltage")
#Plot3
plot(features_s1[, dateTime], features_s1[, Sub_metering_1], type="l",
xlab="",
ylab="Energy sub metering")
#Create line plots for the other two sub metering stations
lines(features_s1[, dateTime], features_s1[, Sub_metering_2],col="red")
lines(features_s1[, dateTime], features_s1[, Sub_metering_3],col="blue")
#create legend with appropriate colors to match Sub Metering colors shown above
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
# Plot 4
plot(powerDT[, dateTime], powerDT[,Global_reactive_power], type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
#Prepare png file for saving
png("plot4.png", width=480, height=480)
#Four plots, including plot #2 and #3
#Specify 2 x 2 plots; first column contains plot #2 and #3
par(mfrow=c(2,2))
# Plot1 (previously plot #2)
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
# First combine Date and time columents
features_s1[, dateTime := as.POSIXct(paste(Date, Time), format = "%Y-%m-%d %H:%M:%S")]
#Specify 2 x 2 plots; first column contains plot #2 and #3
par(mfrow=c(2,2))
# Plot1 (previously plot #2)
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
#Plot
ylab="Global_reactive_power")
dev.off()
#Prepare png file for saving
png("plot4.png", width=480, height=480)
#Four plots, including plot #2 and #3
#Specify 2 x 2 plots; first column contains plot #2 and #3
par(mfrow=c(2,2))
# Plot1 (previously plot #2)
plot(x = features_s1[, dateTime]
, y = features_s1[, Global_active_power]
, type="l", xlab="", ylab="Global Active Power (kilowatts)")
#Plot 2- New plot; Voltage vs time
plot(x = features_s1[, dateTime]
, y = features_s1[,Voltage ]
, type="l", xlab="datetime", ylab="Voltage")
#Plot3
plot(features_s1[, dateTime], features_s1[, Sub_metering_1], type="l",
xlab="",
ylab="Energy sub metering")
#Create line plots for the other two sub metering stations
lines(features_s1[, dateTime], features_s1[, Sub_metering_2],col="red")
lines(features_s1[, dateTime], features_s1[, Sub_metering_3],col="blue")
#create legend with appropriate colors to match Sub Metering colors shown above
legend("topright"
, col=c("black","red","blue")
, c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  ")
,lty=c(1,1), lwd=c(1,1))
# Plot 4
plot(features_s1[, dateTime], features_s1[,Global_reactive_power], type="l",
xlab="datetime",
ylab="Global_reactive_power")
dev.off()
